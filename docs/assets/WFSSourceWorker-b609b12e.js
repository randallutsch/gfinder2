import{j as l}from"./asyncUtils-bd6eb812.js";import{a as n,s as g}from"./Error-1dfe2922.js";import{r as _,e as f}from"./typedArrayUtil-4015bf74.js";import{f as m,j as d}from"./promiseUtils-e323addc.js";import{E as w,z as p}from"./Extent-54ef1174.js";import{n as E,r as q}from"./featureConversionUtils-99b22ab9.js";import{u as F}from"./FeatureStore-8d8028f1.js";import{g as S,f as T}from"./projectionSupport-c502c67b.js";import{Y as x}from"./QueryEngine-a8ec996b.js";import{T as j,I}from"./geojson-ae634712.js";import{m as b}from"./sourceUtils-c56f921f.js";import{K as C}from"./wfsUtils-362e1ffb.js";import{r as P}from"./FieldsIndex-1a4aad48.js";import"./cast-7ef3a066.js";import"./string-7d6c8f5c.js";import"./ArrayPool-45db95ab.js";import"./nextTick-3ee5a785.js";import"./jsonUtils-196b5f3d.js";import"./Polyline-d942e774.js";import"./OptimizedFeature-aa2e72dc.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./Evented-7dfb249a.js";import"./aaBoundingBox-10130714.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./aaBoundingRect-e7f76732.js";import"./PooledRBush-5a9664c5.js";import"./quickselect-322ec8e1.js";import"./centroid-e729b670.js";import"./projection-546d7390.js";import"./preload-helper-13baf9e6.js";import"./unitUtils-58dc72ed.js";import"./jsonMap-c8081704.js";import"./SimpleObservable-ddf0ceba.js";import"./mat4-62d5e6a4.js";import"./assets-01cdd9d9.js";import"./request-c492a3be.js";import"./zscale-65468675.js";import"./json-48e3ea08.js";import"./MemCache-15515535.js";import"./normalizeUtils-c2a86e04.js";import"./geometry-22feb2bb.js";import"./typeUtils-17403a33.js";import"./QueryEngineResult-c9b8d7e0.js";import"./quantizationUtils-14228c88.js";import"./ItemCache-eb0f81ed.js";import"./WhereClause-f3484bdd.js";import"./utils-e34e3efd.js";import"./generateRendererUtils-8612ca33.js";import"./colorRamps-68d0ae1f.js";import"./Color-7a3d8c62.js";import"./colorUtils-639f4d25.js";import"./enumeration-cda3949b.js";import"./Symbol-6522d2f3.js";import"./utils-876e19a7.js";import"./fieldUtils-c1d551c9.js";import"./arcadeOnDemand-0f33a2b4.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-db4fc9d4.js";import"./Scheduler-5da9d6c9.js";import"./reactiveUtils-b911287d.js";import"./xmlUtils-444cb4c0.js";import"./Field-a857bb5a.js";import"./fieldType-36e8171c.js";class At{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await C(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await j(i),m(t);const o=I(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!w(this._queryEngine.spatialReference,p))for(const r of o)_(r.geometry)&&(r.geometry=E(S(q(r.geometry,this._queryEngine.geometryType,!1,!1),p,this._queryEngine.spatialReference)));let a=1;for(const r of o){const s={};b(this._fieldsIndex,s,r.attributes,!0),r.attributes=s,r.attributes[e]==null&&(r.objectId=r.attributes[e]=a++)}return o}}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:o,spatialReference:a,fields:r,geometryType:s,featureType:u,objectIdField:h,customParameters:y}=t;this._featureType=u,this._customParameters=y,this._getFeatureUrl=i,this._getFeatureOutputFormat=o,this._fieldsIndex=new P(r),await this._checkProjection(a),m(e),this._queryEngine=new x({fields:r,geometryType:s,hasM:!1,hasZ:!1,objectIdField:h,spatialReference:a,timeInfo:null,featureStore:new F({geometryType:s,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(f(e.signal));return this._queryEngine.featureStore.addMany(c),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new n("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){var e;return this._customParameters=t,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=l(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),i&&this._queryEngine.featureStore.addMany(i)},i=>{this._queryEngine.featureStore.clear(),d(i)||g.getLogger("esri.layers.WFSLayer").error(new n("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:i}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await T(p,t)}catch{throw new n("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{At as default};
