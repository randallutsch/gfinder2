import"./geometry-1b3a0099.js";import{r as a,p as l}from"./typedArrayUtil-6bfe4dae.js";import{c}from"./projection-b78b11c8.js";import{g as i,W as p,T as f,D as u,j as S}from"./pixelUtils-3328f7e1.js";import{S as d,T as h,p as y}from"./RasterSymbolizer-89dd4dd7.js";import{l as x,i as O}from"./utils-17f1feff.js";import{M as N,T as J,$ as b}from"./rasterProjectionHelper-11ff5f1f.js";import{d as g,m as w,f as B}from"./dataUtils-4e290d45.js";import{a as m}from"./Extent-b8913cd1.js";import"./ensureType-abaf235a.js";import"./string-46813dd9.js";import"./Error-e5869661.js";import"./Polyline-7684a66d.js";import"./cast-34ff1fab.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-281d25c9.js";import"./typeUtils-0cf27003.js";import"./jsonMap-92eea954.js";import"./preload-helper-596b5639.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./unitUtils-2906b0b4.js";import"./SimpleObservable-f97014ec.js";import"./mat4-62d5e6a4.js";import"./assets-4600b25c.js";import"./request-0ae6f728.js";import"./zscale-750d6efd.js";import"./colorUtils-0c057879.js";import"./Color-0f9fdd46.js";import"./colorUtils-639f4d25.js";import"./enumeration-e40d8895.js";import"./colorRamps-d6116b89.js";class it{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),o=g(e,t.type);return Promise.resolve(a(o)&&o.toJSON())}async decode(t){const e=await d(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?m.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(a(e)&&e.toJSON())}async updateSymbolizer(t){var e;this.symbolizer=h.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=x(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:m.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(o=>a(o)?i.fromJSON(o):null),primaryRasterIds:t.primaryRasterIds});return a(e)?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(a(e)&&e.toJSON())}estimateStatisticsHistograms(t){const e=y(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=p(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(n=>n?new i(n):null),o=f(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=o;return t.coefs&&(s=u(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=S(t.destDimension,t.gcsGrid),s=l(w(s,t.isUV?"vector-uv":"vector-magdir",r))),{pixelBlock:s==null?void 0:s.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await B(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=m.fromJSON(t.projectedExtent),o=m.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new c({steps:t.datumTransformationSteps})),(t.includeGCSGrid||N(e.spatialReference,o.spatialReference,r))&&await J();const s=t.rasterTransform?O(t.rasterTransform):null;return b({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:s})}}export{it as default};
