import{e as _,n as F}from"./cast-7ef3a066.js";import"./string-7d6c8f5c.js";import{r as S,o as f}from"./typedArrayUtil-4015bf74.js";import"./Error-1dfe2922.js";import"./ArrayPool-45db95ab.js";import{m as U}from"./diffUtils-f2c670bd.js";import{s as v}from"./heatmapUtils-90a13d85.js";import{Q as E}from"./enums-ef042d89.js";import{p as O}from"./BaseProcessor-80d6a95e.js";import{l as a}from"./tileUtils-d57fc766.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-e323addc.js";import"./Collection-8f94e599.js";import"./Evented-7dfb249a.js";import"./SimpleObservable-ddf0ceba.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./screenUtils-7afeb41c.js";import"./vec4f64-018b3fa6.js";import"./HandleOwner-2d282b7c.js";import"./reactiveUtils-b911287d.js";import"./Extent-54ef1174.js";import"./Query-8a7aa408.js";import"./geometry-22feb2bb.js";import"./Polyline-d942e774.js";import"./typeUtils-17403a33.js";import"./jsonMap-c8081704.js";import"./TimeExtent-dfe3f644.js";import"./enumeration-cda3949b.js";import"./jsonUtils-196b5f3d.js";import"./Field-a857bb5a.js";import"./fieldType-36e8171c.js";import"./Clonable-c315fc8d.js";import"./TileKey-03ab4f60.js";class n{constructor(t,r){this.offset=t,this.extent=r}}function g(i){const t=i.key,r=new Map,s=256,e=E,o=i.tileInfoView.tileInfo.isWrappable;return r.set(a(t,-1,-1,o).id,new n([-e,-e],[e-s,e-s,e,e])),r.set(a(t,0,-1,o).id,new n([0,-e],[0,e-s,e,e])),r.set(a(t,1,-1,o).id,new n([e,-e],[0,e-s,s,e])),r.set(a(t,-1,0,o).id,new n([-e,0],[e-s,0,e,e])),r.set(a(t,1,0,o).id,new n([e,0],[0,0,s,e])),r.set(a(t,-1,1,o).id,new n([-e,e],[e-s,0,e,s])),r.set(a(t,0,1,o).id,new n([0,e],[0,0,e,s])),r.set(a(t,1,1,o).id,new n([e,e],[0,0,s,s])),r}let l=class extends O{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(i,t){const r=t.schema.processors[0];r.type==="heatmap"&&U(this._schema,r)&&(i.mesh=!0,this._schema=r)}onTileUpdate(i){for(const t of i.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(i){const t={clear:!0};return this._tileKeyToFeatureSets.delete(i.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:i.id,data:t})}async onTileMessage(i,t,r){this._tileKeyToFeatureSets.has(i.key.id)||this._tileKeyToFeatureSets.set(i.key.id,new Map);const s=this._tileKeyToFeatureSets.get(i.key.id);if(S(t.addOrUpdate)&&t.addOrUpdate.hasFeatures&&s.set(t.addOrUpdate.instance,t),t.end){const e=[],o=g(i);this._tileKeyToFeatureSets.forEach((c,p)=>{if(p===i.key.id)c.forEach(m=>f(m.addOrUpdate,d=>e.push(d)));else if(o.has(p)){const m=o.get(p),[d,T]=m.offset;c.forEach(w=>f(w.addOrUpdate,k=>{const K=k.transform(d,T,1,1);e.push(K)}))}});const h=v(e,this._schema.mesh,512,512),u={tileKey:i.key.id,intensityInfo:h},y=[h.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",u,{...r,transferList:y})}}onTileError(i,t,r){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:i.id,error:t},r)}};l=_([F("esri.views.2d.layers.features.processors.HeatmapProcessor")],l);const me=l;export{me as default};
