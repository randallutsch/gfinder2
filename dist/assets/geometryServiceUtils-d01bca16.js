import{b as p,a}from"./Error-e5869661.js";import{j as l}from"./Portal-d13c5d2a.js";import{a as s,n as c}from"./project-8b344e00.js";import"./string-46813dd9.js";import"./typedArrayUtil-6bfe4dae.js";import"./preload-helper-596b5639.js";import"./cast-34ff1fab.js";import"./ensureType-abaf235a.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-281d25c9.js";import"./request-c6faf466.js";import"./Loadable-3c0fb2d0.js";import"./Promise-19e65545.js";import"./Extent-b8913cd1.js";import"./locale-30120714.js";import"./PortalGroup-506cda94.js";import"./jsonMap-92eea954.js";import"./PortalUser-12cb329a.js";import"./jsonUtils-eb956695.js";import"./Polyline-7684a66d.js";import"./utils-a49efee8.js";async function f(r=null,m){var o,t;if(p.geometryServiceUrl)return p.geometryServiceUrl;if(!r)throw new a("internal:geometry-service-url-not-configured");let e;e="portal"in r?r.portal||l.getDefault():r,await e.load({signal:m});const i=(t=(o=e.helperServices)==null?void 0:o.geometry)==null?void 0:t.url;if(!i)throw new a("internal:geometry-service-url-not-configured");return i}async function B(r,m,e=null,i){const o=await f(e,i),t=new s;t.geometries=[r],t.outSpatialReference=m;const n=await c(o,t,{signal:i});if(n&&Array.isArray(n)&&n.length===1)return n[0];throw new a("internal:geometry-service-projection-failed")}export{f as getGeometryServiceURL,B as projectGeometry};
