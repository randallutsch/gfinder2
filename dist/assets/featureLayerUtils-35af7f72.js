import{S as K,t as F,r as $}from"./typedArrayUtil-4015bf74.js";import{s as R,a as m}from"./Error-1dfe2922.js";import{x as f,E as D}from"./promiseUtils-e323addc.js";import{i as w}from"./originUtils-1469eeaf.js";import j from"./FeatureLayer-7be1483a.js";import{m as _}from"./arcgisLayerUrl-af21cccf.js";import{r as q}from"./fetchService-dd522839.js";import{l as z,o as M}from"./layerUtils-6996b9ea.js";import{j as U}from"./Portal-af5b2c18.js";import Y from"./PortalItem-49bcac17.js";import{o as v}from"./jsonContext-96bc6b0c.js";import{i as c,a as B,c as g,f as n}from"./portalItemUtils-187d4bc6.js";import"./string-7d6c8f5c.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./preload-helper-596b5639.js";import"./cast-7ef3a066.js";import"./ArrayPool-45db95ab.js";import"./nextTick-3ee5a785.js";import"./PopupTemplate-2917795f.js";import"./Clonable-c315fc8d.js";import"./Collection-8f94e599.js";import"./Evented-7dfb249a.js";import"./SimpleObservable-ddf0ceba.js";import"./Extent-54ef1174.js";import"./fieldUtils-cb9b3e6e.js";import"./arcadeOnDemand-490dc8ce.js";import"./geometry-22feb2bb.js";import"./Polyline-d942e774.js";import"./typeUtils-17403a33.js";import"./jsonMap-c8081704.js";import"./enumeration-cda3949b.js";import"./number-1bdcdfd9.js";import"./locale-30120714.js";import"./Identifiable-d701141a.js";import"./UniqueValueRenderer-08aa8b40.js";import"./symbols-d548a197.js";import"./CIMSymbol-308c5b42.js";import"./Symbol-6522d2f3.js";import"./Color-7a3d8c62.js";import"./colorUtils-639f4d25.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-2c2d0d87.js";import"./aaBoundingBox-10130714.js";import"./request-3bbdab19.js";import"./persistableUrlUtils-2c2cd088.js";import"./collectionUtils-07fb1a58.js";import"./LegendOptions-998df0a8.js";import"./reactiveUtils-b911287d.js";import"./diffUtils-f2c670bd.js";import"./colorRamps-68d0ae1f.js";import"./sizeVariableUtils-d4870b0d.js";import"./Graphic-c3b235bf.js";import"./jsonUtils-196b5f3d.js";import"./compilerUtils-c5090cf5.js";import"./lengthUtils-f3b6e37f.js";import"./unitUtils-58dc72ed.js";import"./jsonUtils-2b587c65.js";import"./styleUtils-58c095ea.js";import"./PortalGroup-100f1bed.js";import"./jsonUtils-511fa9a1.js";import"./DictionaryLoader-e6470716.js";import"./LRUCache-f9ba273b.js";import"./MemCache-15515535.js";import"./deprecate-9e0289e6.js";import"./heatmapUtils-90a13d85.js";import"./vec4f64-018b3fa6.js";import"./MultiOriginJSONSupport-98cda0d2.js";import"./LayerFloorInfo-ca7cf7a9.js";import"./FeatureLayerBase-1c170846.js";import"./Field-a857bb5a.js";import"./fieldType-36e8171c.js";import"./HeightModelInfo-91a7cb2a.js";import"./OperationalLayer-06028ec1.js";import"./TimeExtent-dfe3f644.js";import"./ElevationInfo-01beda98.js";import"./RelationshipQuery-2b83908f.js";import"./Query-8a7aa408.js";import"./Layer-d4420615.js";import"./Loadable-772aaf20.js";import"./Promise-e08b9d4d.js";import"./HandleOwner-2d282b7c.js";import"./workers-957326d1.js";import"./Connection-4985e9bc.js";import"./Queue-26a7c9c9.js";import"./assets-04f03891.js";import"./intl-c3eb9a7a.js";import"./messages-c2cf09a4.js";import"./editsZScale-6893b5ed.js";import"./queryZScale-9c82ac96.js";import"./zscale-65468675.js";import"./FeatureSet-daef9679.js";import"./PortalUser-0170111d.js";import"./APIKeyMixin-62cd629d.js";import"./ArcGISService-391eca72.js";import"./BlendLayer-00b35d0f.js";import"./parser-60fed632.js";import"./mat4-62d5e6a4.js";import"./CustomParametersMixin-1353f893.js";import"./EditBusLayer-862b6183.js";import"./FeatureReductionLayer-df295e9a.js";import"./labelingInfo-aad6832f.js";import"./labelUtils-d3906ba4.js";import"./defaultsJSON-b087dd4d.js";import"./OrderedLayer-5a5e20b8.js";import"./PortalLayer-2a93959d.js";import"./asyncUtils-bd6eb812.js";import"./RefreshableLayer-e9f8071f.js";import"./ScaleRangeLayer-21fc7ea0.js";import"./TemporalLayer-797e0d5e.js";import"./TimeInfo-ce3628a3.js";import"./FeatureTemplate-281b6fcc.js";import"./FeatureType-980424ee.js";import"./fieldProperties-69262b89.js";import"./FieldsIndex-b44c88ca.js";import"./versionUtils-5fe0d938.js";import"./styleUtils-d1f4a996.js";import"./TopFeaturesQuery-c1b3daab.js";import"./popupUtils-3b3b82a2.js";import"./projection-6d5d9468.js";const C=R.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(t,r){return`Layer (title: ${t.title}, id: ${t.id}) of type '${t.declaredClass}' ${r}`}function E(t,r){if(r.type!==d)throw new m("feature-layer:portal-item-wrong-type",u(t,`should have portal item of type "${d}"`))}async function J(t){if(await t.load(),z(t))throw new m("feature-layer:save",u(t,"using an in-memory source cannot be saved to a portal item"))}function G(t,r){let a=(t.messages??[]).filter(({type:o})=>o==="error").map(({name:o,message:i,details:e})=>new m(o,i,e));if(r!=null&&r.ignoreUnsupported&&(a=a.filter(({name:o})=>o!=="layer:unsupported"&&o!=="symbol:unsupported"&&o!=="symbol-layer:unsupported"&&o!=="property:unsupported"&&o!=="url:unsupported")),a.length>0)throw new m("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:a})}async function h(t,r,a){"beforeSave"in t&&typeof t.beforeSave=="function"&&await t.beforeSave();const o=t.write({},r);return G(r,a),o}function N(t){const{layer:r,layerJSON:a}=t;return r.isTable?{layers:[],tables:[a]}:{layers:[a],tables:[]}}function b(t){c(t,n.JSAPI),t.typeKeywords&&(t.typeKeywords=t.typeKeywords.filter((r,a,o)=>o.indexOf(r)===a))}function Z(t){const r=t.portalItem;if(!r)throw C.error("save: requires the portalItem property to be set"),new m("feature-layer:portal-item-not-set",u(t,"requires the portalItem property to be set"));if(!r.loaded)throw new m("feature-layer:portal-item-not-loaded",u(t,"cannot be saved to a portal item that does not exist or is inaccessible"));E(t,r)}async function O(t,r){return/\/\d+\/?$/.test(t.url??"")?N(r[0]):k(t,r)}async function k(t,r){const{layer:{url:a,customParameters:o,apiKey:i}}=r[0];let e=await t.fetchData("json");e&&e.layers!=null&&e.tables!=null||(e=await H(e,{url:a??"",customParameters:o,apiKey:i},r.map(p=>p.layer.layerId)));for(const p of r)P(p.layer,p.layerJSON,e);return e}async function H(t,r,a){var o,i;t||(t={}),(o=t).layers||(o.layers=[]),(i=t).tables||(i.tables=[]);const{url:e,customParameters:p,apiKey:s}=r,{serviceJSON:l,layersJSON:y}=await q(e,{customParameters:p,apiKey:s}),S=x(t.layers,l.layers,a),I=x(t.tables,l.tables,a);t.layers=S.itemResources,t.tables=I.itemResources;const T=[...S.added,...I.added],L=y?[...y.layers,...y.tables]:[];return await Q(t,T,e,L),t}function x(t,r,a){const o=K(t,r,(e,p)=>e.id===p.id);t=t.filter(e=>!o.removed.some(p=>p.id===e.id));const i=o.added.map(({id:e})=>({id:e}));return i.forEach(({id:e})=>{t.push({id:e})}),{itemResources:t,added:i.filter(({id:e})=>!a.includes(e))}}async function Q(t,r,a,o){const i=r.map(({id:e})=>new j({url:a,layerId:e,sourceJSON:o.find(({id:p})=>p===e)}));await D(i.map(e=>e.load())),i.forEach(e=>{const{layerId:p,loaded:s,defaultPopupTemplate:l}=e;!s||F(l)||P(e,{id:p,popupInfo:l.toJSON()},t)})}function P(t,r,a){t.isTable?A(a.tables,r):A(a.layers,r)}function A(t,r){if(!t)return;const a=t.findIndex(({id:o})=>o===r.id);a===-1?t.push(r):t[a]=r}function V(t){const{portalItem:r}=t;return M(t)&&!t.dynamicDataSource&&!!(r!=null&&r.loaded)&&r.type===d}async function W(t){if(!(t!=null&&t.length))throw new m("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(t.map(o=>o.load()));for(const o of t)if(!V(o))throw new m("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(o,"does not conform")}`,{layer:o});const r=t.map(o=>o.portalItem.id);if(new Set(r).size>1)throw new m("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const a=t.map(o=>o.layerId);if(new Set(a).size!==a.length)throw new m("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function X(t,r){var a,o;let i=Y.from(r);return i.id&&(i=i.clone(),i.id=null),(a=i).type??(a.type=d),(o=i).portal??(o.portal=U.getDefault()),E(t,i),i}async function tt(t,r){const{url:a,layerId:o,title:i,fullExtent:e,isTable:p}=t,s=_(a),l=$(s)&&s.serverType==="FeatureServer";r.url=l?a:`${a}/${o}`,r.title||(r.title=i),r.extent=null,!p&&$(e)&&(r.extent=await B(e)),g(r,n.METADATA),g(r,n.MULTI_LAYER),c(r,n.SINGLE_LAYER),p&&c(r,n.TABLE),b(r)}async function rt(t,r,a){var i;const o=t.portal;await(o==null?void 0:o._signIn()),await((i=o==null?void 0:o.user)==null?void 0:i.addItem({item:t,data:r,folder:a==null?void 0:a.folder}))}const ho=f(ot);async function ot(t,r){await J(t),Z(t);const a=t.portalItem,o=v(a),i=await h(t,o,r),e=await O(a,[{layer:t,layerJSON:i}]);return b(a),await a.update({data:e}),w(o),a}const bo=f(async(t,r)=>{await W(t);const a=t[0].portalItem,o=v(a),i=await Promise.all(t.map(p=>h(p,o,r))),e=await O(a,t.map((p,s)=>({layer:p,layerJSON:i[s]})));return b(a),await a.update({data:e}),await Promise.all(t.slice(1).map(p=>p.portalItem.reload())),w(o),a.clone()}),So=f(at);async function at(t,r,a){await J(t);const o=X(t,r),i=v(o),e=N({layer:t,layerJSON:await h(t,i,a)});return await tt(t,o),await rt(o,e,a),t.portalItem=o,w(i),o}export{ho as save,bo as saveAll,So as saveAs};
